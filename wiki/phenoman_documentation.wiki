===== Getting Started with PhenoMan =====
<code bash>
gw_log doc --author 'Biao Li' --title 'PhenoMan Documentation' --toc  -f doc_phenoman.snote\
s --lite # eval `grep gw_log *.snotes`
</code>\\
 We suggest that after downloading and installing PhenoMan you first try using 'phenoman report' to generate a brief overview of your phenotype dataset. This will familiarize you with basic **PhenoMan** commands and functions.

====Citing PhenoMan====
 If you use **PhenoMan** in any published work, please cite both the software (as an electronic resource/URL) and the manuscript that describing the methods.

	*	Package:    PhenoMan
	*	Authors:    Biao Li, Gao Wang and Suzanne M. Leal
	*	URL:        http://...
	*	Manuscript:
===  Reporting problems, bugs and questions ===
If you have any problems using **PhenoMan** or would like to report a bug, please follow these steps:

 When **PhenoMan** does not properly generate figures or intermediate/final cleaned datasets, or when **PhenoMan** is applied on the same dataset but seemingly gives different answers at different times, etc, please feel free to contact me:

//libiaospe// AT //gmail// DOT //com//

**//but//** also please consider the following before doing so:

	*	 Please go through cookbook examples (found in the Chapter - A quick PhenoMan tutorial) to get more familiar with **PhenoMan** commands if you have not done so yet.
	*	 Please check the screen output or the LOG file, which may contain important ERROR information. Frequently, it need re-specify command arguments and/or options according to specific **PhenoMan** requirements.
	*	 Please check the format of your input data file: Is it plain text and in **dbGaP** phenotype format? Does each row have correct number of values, which should be equal to number of columns? Are columns deliminated by **tabs**? Are missing values coded appropriately by **nan** as required? etc..
	*	 Please check **PhenoMan** website if **PhenoMan** documentation or the program itself has been updated, sometimes the syntax of an option may change.
	*	 If the above steps do not resolve your problem, please send an email preferrably with the following specific information:
	*	 The complete LOG file or screen ERROR messages
	*	 The type of machine you were using
	*	 Versions of Python and R installed
	*	 Ideally, please try to make some reduced phenotype dataset that replicates the problem, which can be zipped and sent as an attachment; any data sent to me for the purpose of debugging will be immediately deleted after that problem is resolved.
<box 80% round orange|**__Important__**>
 We are willing and able to advise on the use of specific features implemented in **PhenoMan**, to diagnose whether they are working as intended and to give a generic description of a procedure or method, if it is unclear from reading the documentation and cookbook examples.
</box>
The remaining contents of this chapter contains important information regarding how to set up and use **PhenoMan**. Individuals familiar with using command line programs can probably skip them.

====Prerequisites of Using PhenoMan====
**PhenoMan** does require installation of dependency software and possibly need pre-handling of initial phenotype datasets to meet the requirement of input data format.

	*	 Make sure that [[http://www.python.org/download/releases/2.7/|**Python 2.7 or above**]] ([[http://www.python.org/download/releases/3.2/|**Python 3.2 or above**]] preferred), [[http://www.r-project.org/|**R**]] and **ggplot2 0.9 or above** (a R package) have been installed.
	*	 Initial input data must be in [[http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2031016/|**dbGaP** phenotype data format]], where each row represents an individual and each column represents a trait.
<box 80% round green|**__Tip__**>
 Values of each trait can be quantitative, qualitative or text-based strings.
</box>
	*	 The input data must be **Tab** delimited and starts with header (first row) including names of all traits/phenotypes.
	*	 The first column must be sample names of individuals and its header info must be named by **sample_name**.
	*	 Missing values must be coded/represented by **nan** and cannot be left blank in the data file.
====Download====
**PhenoMan** is available for free download. Below is the link to ZIP file containing Python/R source code. Linux/Mac/Windows users should download the source code and complile (see notes below).

<box 80% round blue|**__Note__**>
	*	 This release is considered a stable release, although please remember that we cannot guarantee that it, just like most computer programs, does not contain bugs...
	*	 If you download **PhenoMan** please drop an email //libiaospe// AT //gmail// DOT //com// letting me know that you have downloaded a copy.
</box>
====Installation====
**PhenoMan** is distributed as Python/R source code, which user can compile for your particular system using standard Python compiler.

===  Dependencies ===
**PhenoMan** requires installing **Python 2.7+** (**Python 3.2+** preferred), **R** and **ggplot2 0.9+** (a R package) first.

For example, in Ubuntu-like system run the following commands:

<code bash>
sudo apt-get install python3
sudo apt-get install r-base r-base-dev python3
sudo R
install.packages("ggplot2")
</code>\\
<box 80% round orange|**__Important__**>
 For any other type of operating system, please refer to online tutorial or your system administrator to have dependency software properly installed and make sure that **Python** and **R** are in your system **PATH**.
</box>
===  Compilation ===
Download the .zip or .tar.gz file and perform the following steps:

	*	 tar -xvzf phenoman-src.tar.gz or unzip phenoman-src.zip
	*	 cd phenoman-src
	*	 sudo python3 setup.py install (for Linux-like systems)
===  Running PhenoMan from the command line ===
 A typical session might involve running several commands, e.g. to view help info of each **PhenoMan** command, to produce summary statistics on phenotypes, to view distributions of quantitative traits, to remove/winsorize outliers, to select/remove samples based on given criteria, to control for covariates, etc. Each command involves a separate instantiation of **PhenoMan**.

<box 80% round blue|**__Note__**>
 **PhenoMan** does not remember any parameter settings between different runs or store any other information.
</box>
===== A Quick PhenoMan Tutorial =====
 In this tutorial, we will consider using **PhenoMan** to clean example data: phenotypes of randomly selected individuals from ESP (Exome Sequencing Project). As examples, we will walk through applying **PhenoMan** on three primary traits of interest, one quantitative, one case-control (qualitative), and one extreme quantitative trait using a variety of features: data exploration, sampling, management, summary statistics, quality control, covariates selection, etc., where, of course, quality control is the most important feature of **PhenoMan**.

<box 80% round blue|**__Note__**>
 These data do not represent any realistic study design or realistic collection of phenotypic information. The point of this tutorial is simply to get used to running **PhenoMan**.
</box>
====Preparation====
The first step is to obtain a copy of **PhenoMan**.

	*	 Make sure you have **PhenoMan** successfully installed on your machine (See **Installation** in the previous chapter).
	*	 Download the example data 'example_data.zip', which is in **dbGaP** format and contains phenotype information of randomly selected individuals from ESP
	*	 Create a new folder/directory on your machine, and unzip the file you downloaded into this folder. There you should see 'AA.txt', 'EA.txt',
====Use PhenoMan on a Quatitative Trait====
<box 80% round blue|**__Note__**>
This tutorial is intended to introduce some of **PhenoMan**'s features rather than provide exhaustive coverage of them. Furthermore, it is not intended as a study/analysis plan for quality control procedures of any primary trait of interest, or to represent anyting close to 'best practice'.
</box>
===  Getting started ===
Just typing //phenoman -h// and specifying no further options is to list available modules and brief description of each module's functionality.

 To view detailed help info of each module, also type the name of the module after //phenoman//, e.g. //phenoman show -h//

 As an example for a quantitative trait, we choose 'Adiponectin'. It's corresponded field name in the example dataset is ''esp_adiponectin''.

 Run //>> phenoman show fields --samples AA | grep esp_adiponectin// to check if the primary trait 'esp_adiponectin' is contained in the data.

<box 80% round red|**__Warning__**>
 All the following data cleaning steps need to be applied separately on different ethnic groups, e.g. **AA** (African Americans) and **EA** (European Americans) as the example data shows. We use 'AA.txt' in this tutorial. In practice, if the orignal data set contains individuals from multiple ethnic backgrounds users should have them separated into different data sets to avoid population stratification problem.
</box>
<box 80% round green|**__Tip__**>
 Use command //phenoman select// to sample subpopulations from the original data set. See details about //--removethese// and //--keepthese// by running //phenoman select -h//.
</box>
===  Remove missingness and duplicates ===
 First run //phenoman cook// command to remove individuals that having missing values on the primary trait and are duplicates or related individuals. Save remained ones into file 'AA_adi.txt'.

<code bash>
phenoman cook esp_adiponectin --samples AA.txt --duplicates AAdups.txt --output AA_adi.txt
</code>\\
<hidden -noprint>
  There are 1805 individuals that are missing values on phenotype esp_adiponectin
  
  There are 16 individuals that are duplicates and have been removed
</hidden>\\
 The //--samples// option takes a single file as the input data. The //--duplicates// option may take one or multiple files. Each of them must contain two columns of sample names, where on each row the first individual is to be removed if it co-exists with the second one in the data. In practice, users should create file(s) of duplicates in advance and be able to use them at this step. The //--output// option takes a single file name as the output data file name.

<box 80% round green|**__Tip__**>
 If you wish to remove N individuals while keeping other M individuals (as if N individuals are duplicates of the M individuals) regardless of whether those individuals co-exist in the dataset or not, you may use //phenoman select --keepthese --removethese// (see //phenoman select -h// or **Modules and command examples** for details) other than //phenoman cook --duplicates// so as to end efforts to create the two-columned file(s) required by the //--duplicates// option.
</box>
===  Detect outliers ===
 Draw histogram of phenotype data using //phenoman view// to check its normality.

<code bash>
phenoman view esp_adiponectin --samples AA_adi.txt
eog esp_adiponectin_histogram_AA.png
</code>\\
{{:esp_adiponectin_histogram_AA_adi.png?0.9}}
 Perform Log transformation and check if log transformed data is normally distributed.

<box 80% round green|**__Tip__**>
 Use //log// for the //--transform// option for natural log transformation, use //log10// for log transformation with base 10.
 PhenoMan can also perform other types of data transformations, such as scaling, standardization, normalization and Gaussian quantile normalization.
</box>
<code bash>
phenoman view esp_adiponectin --samples AA_adi.txt --transform log
eog log_esp_adiponectin_histogram_AA_adi.png
</code>\\
{{:log_esp_adiponectin_histogram_AA_adi.png?0.9}}
 Store info of ''log_esp_adiponectin'' into data file.

<code bash>
phenoman view esp_adiponectin --samples AA_adi.txt --transform log --savedata AA_log_adi.tx\
t
</code>\\
<hidden -noprint>
  ...
  Write intermediate dataset to AA_log_adi.txt
</hidden>\\
 Now, the data file 'AA_log_adi.txt' contains trait ''log_esp_adiponectin''. The option //--savedata// takes a single output file name to save an intermediate dataset.

<box 80% round blue|**__Note__**>
 Output file (//--savedata FILE2//) must have a different name from the input file (//--samples FILE1//).
</box>
 Set criteria for determining outliers based on the primary trait ''log_esp_adiponectin'' distribution: by viewing the histogram we decide those that have values < (mean-3*stdev) are outliers. Since the remained sample size is small we will winsorize outliers using //phenoman massage// instead of having them removed.

 mean = 8.5601; stdev = .7688; range = [6.0959, 10.7304] --> (mean-3*stdev) = 6.2537

<code bash>
phenoman massage log_esp_adiponectin -s AA_log_adi.txt --lower 6.2537 --savedata AA_logwin_\
adi.txt
</code>\\
<hidden -noprint>
  sample_name	log_esp_adiponectin	winsorized_log_esp_adiponectin
  HeartGO:JHS:PT-7Z1L	6.096	6.254
  There are 1 individuals that have been winsorized on phenotype log_esp_adiponectin
</hidden>\\
 The options //--lower// and //--upper// specify lower and upper bounds, respectively. See //phenoman massage -h// for more details.

 Set criteria for determining outliers based on other traits

 After individuals with extreme values on the primary trait being removed or winsorized, it may also require to check if within the remaining ones some may have extreme values on other critical factors (e.g. BMI, triglyceride, etc.). If those are necessarily to be removed, it requires to construct intermediate datasets from which more additional individuals can be removed based on other traits.

<box 80% round blue|**__Note__**>
 Skip this step if only outlier detection on the primary trait is needed.
</box>
 For example, check BMI(''esp_bmi_baseline'') for AA dataset in addition to the primary trait (''log_esp_adiponectin'').

 Generate BMI distribution by reading the intermediate dataset 'AA_logwin_adi.txt' and view the BMI distribution

<code bash>
phenoman view esp_bmi_baseline -s AA_logwin_adi.txt
eog esp_bmi_baseline_histogram_AA_logwin_adi.png
</code>\\
<hidden -noprint>
  There are 2 individuals that are missing values on phenotype esp_bmi_baseline
  
  Generating histogram ...
</hidden>\\
{{:esp_bmi_baseline_histogram_AA_logwin_adi_tmp.png?0.9}}
 We will remove individuals that have BMI > 55 for AA; save another intermediate dataset to 'AA_logwinbmi_adi.txt' after removing outliers based on the secondary information, **BMI**, and save namelist of outliers to 'outliers_AA_bmi_adi.txt'.

<code bash>
phenoman view esp_bmi_baseline -s AA_logwin_adi.txt --critical_values 0 55 --savedata AA_lo\
gwinbmi_adi.txt --keepmissing > outliers_AA_bmi_adi.txt
cat outliers_AA_bmi_adi.txt
eog esp_bmi_baseline_histogram_AA_logwin_adi.png
</code>\\
<hidden -noprint>
  There are 2 individuals that are missing values on phenotype esp_bmi_baseline
  
  Generating histogram ...
  Done!
  OUTLIERS detected!
  HeartGO:JHS:PT-7XHX 	57.21088197
  HeartGO:JHS:PT-3HG7 	59.57042838
  ...
  
  Write intermediate dataset to AA_logwinbmi_adi.txt
</hidden>\\
{{:esp_bmi_baseline_histogram_AA_logwin_adi.png?0.9}}
<box 80% round green|**__Tip__**>
 You may notice that by specifying ''--savedata AA_logwinbmi_adi.txt'' the histogram drawn already has the outliers removed.
</box>
 The option //--critical_values// takes two numbers to specify the lower and upper bounds that define extreme phenotypes. Declaring the True/False option //--keepmissing// keeps instead of removing all missing values on trait ''esp_bmi_baseline''.

<box 80% round blue|**__Note__**>
 Use //--keepmissing// with //--savedata// in //phenoman view// command to keep individuals that have missing values on secondary traits. Since BMI is not the primary trait it does not necessarily have to remove those that are missing BMI values.
</box>
<WRAP em hi>
 Exercise
</WRAP>

 Please use PhenoMan to view the distribution of triglyceride (''esp_trigs_baseline'') of the dataset 'AA_logwinbmi_adi.txt' and determine whether to do transformation, if there are any outliers and if there is need to remove/winsorize outliers if detected.

===  Select covariates ===
 Normally for quantitative traits, we detect phenotype-genotype associations by linear regression. Thus, we need to control for covariates in the regression framework to avoid false positive results in establishing such associations. We will use **PhenoMan**'s model selection feature.

<box 80% round orange|**__Important__**>
 It is recommended that a number of covariates as candidates to include in the regression have already been selected in previously determined analysis plan.
</box>
 For Adiponectin, we select the following covariates and use **PhenoMan** to check if they are significantly co-related with the primary trait:

	*	 age at adiponectin (''esp_age_at_adiponectin'')
	*	 BMI (''esp_bmi_baseline'')
	*	 sex (''GONCALO_SEX'')
	*	 smoking (esp_current_smoker_baseline)
 Check significance of covariates individually by running //phenoman show model// commands

<code bash>
phenoman show model --y log_esp_adiponectin --covariates esp_age_at_adiponectin < AA_logwin\
bmi_adi.txt
phenoman show model --y log_esp_adiponectin --covariates esp_bmi_baseline < AA_logwinbmi_ad\
i.txt
phenoman show model --y log_esp_adiponectin --covariates GONCALO_SEX < AA_logwinbmi_adi.txt\

phenoman show model --y log_esp_adiponectin --covariates esp_current_smoker_baseline < AA_l\
ogwinbmi_adi.txt
</code>\\
<hidden -noprint>
  INPUT MODEL:
  
  Predictor                                         	Estimate  	t value   	Pr(>|t|)
  (Intercept)                                       	7.62      	4.01E+01  	1.71E-151
  esp_age_at_adiponectin                            	1.64E-02  	5.07      	5.71E-07
  p-value:                                          	5.71E-07
  ...
</hidden>\\
	*	 age at adiponectin (p-value: 5.71E-07)
	*	 BMI (p-value: 6.27E-01)
	*	 sex (p-value: 1.33E-15)
	*	 smoking (p-value: 5.56E-01)
 The option //--y// takes the main phenotype name (primary trait) and the option //--covariates// takes a list of phenotype names as covariates.

<box 80% round orange|**__Important__**>
 To use //phenoman show model// command, the input dataset should be specified in the end by //< AA_logwinbmi_adi.txt// instead of //--samples AA_logwinbmi_adi.txt//
</box>
 Check significance of covariates by regressing them together

<code bash>
phenoman show model --y log_esp_adiponectin --covariates esp_age_at_adiponectin esp_bmi_bas\
eline GONCALO_SEX esp_current_smoker_baseline < AA_logwinbmi_adi.txt
</code>\\
<hidden -noprint>
  INPUT MODEL:
  
  Predictor                                         	Estimate  	t value   	Pr(>|t|)
  (Intercept)                                       	7.20      	3.12E+01  	5.35E-114
  GONCALO_SEX                                       	6.87E-01  	8.57      	1.66E-16
  esp_bmi_baseline                                  	-1.36E-02 	-3.70     	2.43E-04
  esp_current_smoker_baseline                       	1.69E-02  	1.63E-01  	8.71E-01
  esp_age_at_adiponectin                            	1.14E-02  	3.69      	2.48E-04
  p-value:                                          	0
  
  OPTIMIZED MODEL:
  
  Predictor                                         	Estimate  	t value   	Pr(>|t|)
  (Intercept)                                       	7.21      	3.20E+01  	1.60E-117
  GONCALO_SEX                                       	6.87E-01  	8.58      	1.55E-16
  esp_bmi_baseline                                  	-1.37E-02 	-3.75     	2.04E-04
  esp_age_at_adiponectin                            	1.14E-02  	3.70      	2.43E-04
  
  MODEL SELECTION:
  
  AIC=-315.55	GONCALO_SEX+esp_bmi_baseline+esp_current_smoker_baseline+esp_age_at_adiponectin
  AIC=-317.53	GONCALO_SEX+esp_bmi_baseline+esp_age_at_adiponectin
</hidden>\\
 For adiponectin (log transformed: ''log_esp_adiponectin''), we decide to select the following covariates for AA:

	*	 age at adiponectin (esp_age_at_adiponectin)
	*	 BMI (esp_bmi_baseline)
	*	 sex (GONCALO_SEX)
<box 80% round orange|**__Important__**>
	*	 In real-world practice, you may want to caluclate the first 2 MDS components based on genotype information and include them as 2 additional covariates. Please consider using ''PLINK'' and ''KING'' to generate MDS components and then using //phenoman merge --addcolumns// to add the first 2 MDS as new fields/covariates in the phenotype dataset.
	*	 In addition, you may also treat text-based fields, such as target/cohort information, as candidate covariates and check their significance. Please refer to //phenoman comdummy// to combine and dummy code text-based covariates. The dummy coded covariates can be included in the regression framework and model selection.
</box>
===  Fill missingness in covariates ===
<code bash>
""PhenoMan"" will automatically fill missing values for the selected covariates with ""mean\
"" (quantitative traits) or ""baseline value"" (binary traits). We have to provide the crit\
eria to discard any selected covariant if its proportion of missingness exceeds a given thr\
eshold (use "--filter_missing" option in "phenoman cook" command). To disable this feature,\
 use "--filter_missing -1" or leave the option out. See the next section for details.
</code>\\
===  Perform final cleaning ===
 We use //phenoman cook// to fill in missing values in covariates and to finalize the phenotype data quality control for this example.

<code bash>
phenoman cook log_esp_adiponectin --samples AA_logwinbmi_adi.txt --include esp_age_at_adipo\
nectin esp_bmi_baseline GONCALO_SEX --filter_missing 0.9 --output adiponectin_AA_cleaned.tx\
t > adiponectin_AA_summary.txt
cat adiponectin_AA_summary.txt
</code>\\
<hidden -noprint>
  There are 0 individuals that are missing values on phenotype log_esp_adiponectin
  There are 0 individuals that are duplicates and have been removed
  FIELD	MISSING_RATE	#BELOW_AVG	#ABOVE_AVG
  GONCALO_SEX	0.0000	132	325
  log_esp_adiponectin	0.0000	236	221
  esp_bmi_baseline	0.0044	252	205
  esp_age_at_adiponectin	0.0000	211	246
</hidden>\\
 The //--include// option takes a list of phenotypes which will be extracted from the input data and saved in the output file, if left unspecified it will dump out all phenotypes as covariates. Normally, one should 'include' at least all the selected covariates. The //--filter_missing// option takes a percentage (between 0 and 1) as the threshold of maximum allowed proportion of missingness for covariates included. Any covariate that has missingness greater than or equal to the threshold will be excluded.

<code bash>
head -10 adiponectin_AA_cleaned.txt
</code>\\
<WRAP center 80%>
^  sample_name  ^  log_esp_adiponectin  ^  GONCALO_SEX  ^  esp_bmi_baseline  ^  esp_age_at_adiponectin  ^
|  HeartGO:JHS:PT-3DVZ  |  8.333383327642693  |  2  |  50.0  |  62.0  |
|  HeartGO:JHS:PT-3E26  |  8.395053579648275  |  1  |  24.57786715  |  72.0  |
|  HeartGO:JHS:PT-3ESE  |  8.229936628422465  |  1  |  21.06674327  |  59.0  |
|  HeartGO:JHS:PT-3EYI  |  8.628660860391797  |  2  |  28.02768166  |  64.0  |
|  HeartGO:JHS:PT-3EYM  |  9.642304590056616  |  2  |  50.87325749  |  66.0  |
|  HeartGO:JHS:PT-3F2N  |  9.135382099958434  |  2  |  47.38292011  |  71.0  |
|  HeartGO:JHS:PT-3F3X  |  8.594429194746796  |  2  |  53.9575642  |  59.0  |
|  HeartGO:JHS:PT-3F43  |  8.718986274946996  |  2  |  31.55365915  |  67.0  |
|  HeartGO:JHS:PT-3F87  |  8.371797408723952  |  2  |  54.8696845  |  62.0  |
|  ...  |  ...  |  ...  |  ...  |  ...  |
</WRAP>

 Properties of cleaned dataset

<hidden -noprint>
  log_esp_adiponectin  GONCALO_SEX    esp_bmi_baseline esp_age_at_adiponectin
   Min.   : 6.254      Min.   :1.000   Min.   :17.16    Min.   :24.00
   1st Qu.: 8.052      1st Qu.:1.000   1st Qu.:27.19    1st Qu.:51.00
   Median : 8.517      Median :2.000   Median :32.66    Median :59.00
   Mean   : 8.562      Mean   :1.711   Mean   :35.40    Mean   :57.87
   3rd Qu.: 9.071      3rd Qu.:2.000   3rd Qu.:44.72    3rd Qu.:66.00
   Max.   :10.730      Max.   :2.000   Max.   :54.87    Max.   :84.00
</hidden>\\
===  Use residuals to account for covariates ===
 To control for covariates, **PhenoMan** can also calculate the residuals in the regression model, add residuals as a new field ''phenotype_residuals'' to data and keep only the residuals in the cleaned dataset instead of all selected covariates.

 For example, we can calculate residuals in the regression framework with selected covariates using the option //--add_residuals//:

<code bash>
phenoman show model --y log_esp_adiponectin --covariates esp_age_at_adiponectin esp_bmi_bas\
eline GONCALO_SEX --add_residuals --savedata AA_logwinbmi_resid_adi.txt < AA_logwinbmi_adi.\
txt
</code>\\
<hidden -noprint>
  Add residuals to @@log_esp_adiponectin_residuals@@ and write new dataset to `AA_logwinbmi_resid_adi.txt'
</hidden>\\
<box 80% round blue|**__Note__**>
 The option //--add_residuals// can only be used on quantitative traits.
</box>
 Now we may perform final cleaning by including ''log_esp_adiponectin_residuals'' as the the covariate:

<code bash>
phenoman cook log_esp_adiponectin --samples AA_logwinbmi_resid_adi.txt --include log_esp_ad\
iponectin_residuals --filter_missing 1.0 --output adiponectin_AA_cleaned_resid.txt > adipon\
ectin_AA_summary_resid.txt
cat adiponectin_AA_summary_resid.txt
</code>\\
<hidden -noprint>
  ...
  FIELD	MISSING_RATE	#BELOW_AVG	#ABOVE_AVG
  log_esp_adiponectin	0.0000	236	221
  log_esp_adiponectin_residuals	0.0000	252	205
</hidden>\\
<code bash>
head -10 adiponectin_AA_cleaned_resid.txt
</code>\\
<WRAP center 80%>
^  sample_name  ^  log_esp_adiponectin  ^  log_esp_adiponectin_residuals  ^
|  HeartGO:JHS:PT-3DVZ  |  8.333383327642693  |  -0.280199008902424  |
|  HeartGO:JHS:PT-3E26  |  8.395053579648275  |  0.0166466539367591  |
|  HeartGO:JHS:PT-3ESE  |  8.229936628422465  |  -0.0446423132570865  |
|  HeartGO:JHS:PT-3EYI  |  8.628660860391797  |  -0.294649026745275  |
|  HeartGO:JHS:PT-3EYM  |  9.642304590056616  |  0.994072991660179  |
|  HeartGO:JHS:PT-3F2N  |  9.135382099958434  |  0.384051927782906  |
|  HeartGO:JHS:PT-3F3X  |  8.594429194746796  |  0.0670200597276666  |
|  HeartGO:JHS:PT-3F43  |  8.718986274946996  |  -0.192847895571843  |
|  HeartGO:JHS:PT-3F87  |  8.371797408723952  |  -0.178242898815812  |
|  ...  |  ...  |  ...  |
</WRAP>

 Properties of cleaned dataset

<code bash>
phenoman show summary < adiponectin_AA_cleaned_resid.txt
</code>\\
<hidden -noprint>
  log_esp_adiponectin log_esp_adiponectin_residuals
   Min.   : 6.254      Min.   :-2.05758
   1st Qu.: 8.052      1st Qu.:-0.46897
   Median : 8.517      Median :-0.01095
   Mean   : 8.562      Mean   : 0.04283
   3rd Qu.: 9.071      3rd Qu.: 0.49671
   Max.   :10.730      Max.   :10.11832
</hidden>\\
====Use PhenoMan on a Qualitative Trait====
<box 80% round blue|**__Note__**>
This tutorial is intended to introduce some of **PhenoMan**'s features rather than provide exhaustive coverage of them. Furthermore, it is not intended as a study/analysis plan for quality control procedures of any primary trait of interest, or to represent anyting close to 'best practice'.
</box>
===  Getting started ===
Just typing //phenoman -h// and specifying no further options is to list available modules and brief description of each module's functionality.

<code bash>
To view detailed help info of each module, also type the name of the module after phenoman,\
 e.g. "phenoman show -h"
As an example for a qualitative/case-control trait, we choose ""Gout"". Its corresponded fi\
eld name in the example dataset is @@esp_gout@@.
Run >> "phenoman show fields --samples EA | grep esp_gout" to check if the primary trait @@\
esp_gout@@ is contained in the data.
</code>\\
<box 80% round red|**__Warning__**>
 All the following data cleaning steps need to be applied separately on different ethnic groups, e.g. AA (African Americans) and EA (European Americans) as the example data shows. We use 'EA.txt' in this tutorial. In practice, if the orignal data set contains individuals from multiple ethnic backgrounds, users should have them separated into different data sets to avoid population stratification problem.
</box>
<box 80% round green|**__Tip__**>
 Use command //phenoman select// to sample subpopulations from the original data set. See details about //--removethese// and //--keepthese// by running //phenoman select -h//.
</box>
===  Remove missingness and duplicates ===
 First run //phenoman cook// command to remove individuals that having missing values on the primary trait and are duplicates or related individuals. Save remained ones into file 'EA_gout.txt'.

<code bash>
phenoman cook esp_gout --samples EA.txt --duplicates EAdups.txt --output EA_gout.txt
</code>\\
<hidden -noprint>
  There are 3201 individuals that are missing values on phenotype esp_gout
  
  There are 58 individuals that are duplicates and have been removed
</hidden>\\
 The //--samples// option takes a single file as the input data. The //--duplicates// option may take one or multiple files. Each of them must contain two columns of sample names, where on each row the first individual is to be removed if it co-exists with the second one in the data. In practice, users should create file(s) of duplicates in advance and be able to use them at this step. The //--output// option takes a single file name as the output data file name.

===  Choose case samples ===
 Select all case samples using //phenoman select// command

<code bash>
phenoman select --samples EA_gout.txt --traits esp_gout --criteria 1 --savedata EA_cases_go\
ut.txt
</code>\\
<hidden -noprint>
  The following individuals (N = 1085) have been removed:
  HeartGO:ARIC:131000690
  HeartGO:ARIC:131000976
  HeartGO:ARIC:131001527
  HeartGO:ARIC:131001781
  HeartGO:ARIC:131002533
  ...
  (1080 sample names omitted)
  
  Number of individuals removed: 1085
  Number of individuals remained/selected: 53
  
  Write intermediate dataset to EA_cases_gout.txt
  
</hidden>\\
 There are 53 case samples in EA.

 The option //--traits// takes a list of phenotypes/traits based on which samples will be selected. The option //--criteria// take a list of criteria. See //phenoman select -h// for more details. Only individuals that have given traits fit into specified criteria will be selected.

===  Choose control samples ===
 As an example, we will use **PhenoMan** to select 159 = 3 x 53 (number of cases) control samples following a series of restrictions.

 First, select all control samples

<code bash>
phenoman select --samples EA_gout.txt --traits esp_gout --criteria 0 --savedata EA_controls\
_gout_tmp1.txt
</code>\\
<hidden -noprint>
  The following individuals (N = 53) have been removed:
  HeartGO:ARIC:131003885
  HeartGO:ARIC:131011054
  HeartGO:ARIC:131012772
  HeartGO:ARIC:131021911
  HeartGO:ARIC:131028796
  ...
  (48 sample names omitted)
  
  Number of individuals removed: 53
  Number of individuals remained/selected: 1085
  
  Write intermediate dataset to EA_controls_gout_tmp1.txt
</hidden>\\
 Select those who have ''esp_gout == 0 AND ESP_PHENOTYPE == 'DPR'''

<code bash>
phenoman select -s EA_controls_gout_tmp1.txt --traits esp_gout ESP_PHENOTYPE --criteria 0 D\
PR --savedata EA_controls_gout_tmp2.txt
</code>\\
<hidden -noprint>
  Number of individuals removed: 768
  Number of individuals remained/selected: 317
  ...
</hidden>\\
<box 80% round blue|**__Note__**>
 ''DPR'' is the name of a cohort which contains deeply sequenced controls.
</box>
 Further select controls individuals that have ''esp_mi_baseline == 0 AND esp_mi_during_followup == 0''

<code bash>
phenoman select --samples EA_controls_gout_tmp2.txt --traits esp_mi_baseline esp_mi_during_\
followup --criteria 0 0 --savedata EA_controls_gout_tmp3.txt
</code>\\
<hidden -noprint>
  Number of individuals removed: 46
  Number of individuals remained/selected: 271
  ...
</hidden>\\
<box 80% round blue|**__Note__**>
 ''esp_mi_baseline == 0 AND esp_mi_during_followup == 0'' indicates that no medical inspection occurred either at the beginning or during the follow up of the cohort study.
</box>
 Select controls who have ''esp_t2diabetes_baseline == 0''

<code bash>
phenoman select -s EA_controls_gout_tmp3.txt --traits esp_t2diabetes_baseline --criteria 0 \
--savedata EA_controls_gout_tmp4.txt
</code>\\
<hidden -noprint>
  Number of individuals removed: 11
  Number of individuals remained/selected: 260
  ...
</hidden>\\
<box 80% round blue|**__Note__**>
 ''esp_t2diabetes_baseline == 0'' represents individuals that did not have type II diabetes.
</box>
 Remove controls that have ''esp_t2d_med_baseline == 0''

<code bash>
phenoman select --samples EA_controls_gout_tmp4.txt --traits esp_t2d_med_baseline --criteri\
a 0 --removeselected --savedata EA_controls_gout_tmp5.txt
</code>\\
<hidden -noprint>
  Number of individuals removed: 204
  Number of individuals remained/selected: 56
  ...
</hidden>\\
 The option //--removeselected// will remove selected individuals and keep unselected ones.

<box 80% round blue|**__Note__**>
 There left two few control samples (56) compared to the required number (159). We rerun last command with the option //--samplesize 159// to randomly choose a number of individuals that ought to be removed but are added back in the remained control samples in order to meet the sample size requirement.
</box>
<box 80% round green|**__Tip__**>
 Except restoring removed individuals, using the option //--samplesize// can also delete remained ones to meet the sample size requirement. See **Modules and command examples** for more details.
</box>
<code bash>
phenoman select --samples EA_controls_gout_tmp4.txt --traits esp_t2d_med_baseline --criteri\
a 0 --removeselected --samplesize 159 --savedata EA_controls_gout_final.txt
</code>\\
<hidden -noprint>
  WARNING: The following individuals ought to be removed according to the criteria but are randomly chosen from removed ones to be kept in the remained dataset in order to meet the sample size requirement (159). If you still want them to be removed, please rerun the last command WITHOUT specifying "--samplesize" argument
  
  WARNING: these individuals (N = 103) are restored:
  HeartGO:ARIC:131112471
  HeartGO:ARIC:131153390
  HeartGO:MESA:14120
  HeartGO:MESA:13191
  HeartGO:MESA:14134
  ...
  (98 sample names omitted)
  
  The following individuals (N = 101) have been removed:
  HeartGO:ARIC:131001527
  HeartGO:ARIC:131018132
  HeartGO:ARIC:131026265
  HeartGO:ARIC:131035189
  HeartGO:ARIC:131038720
  ...
  (96 sample names omitted)
  
  Number of individuals removed: 101
  Number of individuals remained/selected: 159
  
  Write intermediate dataset to EA_controls_gout_final.txt
</hidden>\\
===  Merge selected cases and controls ===
 We use //phenoman merge// to combine multiple data files into a single file.

<code bash>
phenoman merge --byrows EA_cases_gout.txt EA_controls_gout_final.txt --output EA_gout_selec\
ted.txt
</code>\\
 The option //--byrows// takes a list of files to be merged together by row.

===  Select covariates ===
 Normally in logistic regression framework for detecting phenotype-genotype associations in qualitative traits, we also control for covariates as we do to quantitative traits in linear regression to avoid false positive results.

<box 80% round orange|**__Important__**>
 It is recommended that a number of covariates as candidates to include in the regression have already been selected in previously determined analysis plan.
</box>
 For Gout, we select the following covariates and use **PhenoMan** model selection feature to check if they are significantly correlated with the primary trait:

	*	 sex (''GONCALO_SEX'')
	*	 BMI (''esp_bmi_baseline'')
	*	 age (''esp_age_baseline'')
	*	 age^2 (''AGEe2'')
 Check significance of covariates individually by running //phenoman show model// commands

<code bash>
phenoman show model --y esp_gout --covariates GONCALO_SEX <  EA_gout_selected.txt
phenoman show model --y esp_gout --covariates esp_bmi_baseline <  EA_gout_selected.txt
phenoman show model --y esp_gout --covariates esp_age_baseline <  EA_gout_selected.txt
phenoman show model --y esp_gout --covariates AGEe2 <  EA_gout_selected.txt
</code>\\
	*	 sex (p-value: 7.66E-01)
	*	 BMI (p-value: 4.98E-05)
	*	 age (p-value: 1.12E-04)
	*	 age^2 (p-value: 2.55E-04)
 Check significance of covariates by regressing them together

<code bash>
phenoman show model --y esp_gout --covariates GONCALO_SEX esp_bmi_baseline esp_age_baseline\
 AGEe2 < EA_gout_selected.txt
</code>\\
<hidden -noprint>
  INPUT MODEL:
  
  Predictor                                         	Estimate  	z value   	Pr(>|z|)
  (Intercept)                                       	1.33      	3.82E-01  	7.02E-01
  GONCALO_SEX                                       	-2.14E-02 	-4.68E-02 	9.63E-01
  esp_age_baseline                                  	-1.89E-01 	-1.50     	1.33E-01
  AGEe2                                             	1.18E-03  	1.00      	3.16E-01
  esp_bmi_baseline                                  	1.47E-01  	3.86      	1.14E-04
  p-value:                                          	7.56E-07
  
  OPTIMIZED MODEL:
  
  Predictor                                         	Estimate  	z value   	Pr(>|z|)
  (Intercept)                                       	-1.85     	-1.41     	1.57E-01
  esp_age_baseline                                  	-6.63E-02 	-3.73     	1.88E-04
  esp_bmi_baseline                                  	1.50E-01  	3.87      	1.07E-04
  
  MODEL SELECTION:
  
  AIC=214.46	GONCALO_SEX+esp_age_baseline+AGEe2+esp_bmi_baseline
  AIC=212.46	esp_age_baseline+AGEe2+esp_bmi_baseline
  AIC=211.49	esp_age_baseline+esp_bmi_baseline
</hidden>\\
 Thus, we decide to select age (''esp_age_baseline'') and BMI (''esp_bmi_baseline'') as covariates for EA_gout

===  Perform final cleaning ===
 We use //phenoman cook// to fill in missing values in covariates and to finalize the phenotype data quality control for this example.

<code bash>
phenoman cook esp_gout --samples EA_gout_selected.txt --include esp_age_baseline esp_bmi_ba\
seline --filter_missing 0.8 --output gout_EA_cleaned.txt > gout_EA_summary.txt
cat gout_EA_summary.txt
</code>\\
<hidden -noprint>
  There are 0 individuals that are missing values on phenotype esp_gout
  There are 0 individuals that are duplicates and have been removed
  FIELD	MISSING_RATE	#BELOW_AVG	#ABOVE_AVG
  esp_gout	0.0000	159	53
  esp_bmi_baseline	0.0000	122	90
  esp_age_baseline	0.0000	114	98
</hidden>\\
<code bash>
head -10 gout_EA_cleaned.txt
</code>\\
<WRAP center 80%>
^  sample_name  ^  esp_gout  ^  esp_age_baseline  ^  esp_bmi_baseline  ^
|  HeartGO:ARIC:131003885  |  1.0  |  58.0  |  28.80597  |
|  HeartGO:ARIC:131011054  |  1.0  |  49.0  |  44.86731  |
|  HeartGO:ARIC:131012772  |  1.0  |  55.0  |  31.35358  |
|  HeartGO:ARIC:131021911  |  1.0  |  61.0  |  33.6948  |
|  HeartGO:ARIC:131028796  |  1.0  |  62.0  |  31.75244  |
|  HeartGO:ARIC:131037676  |  1.0  |  59.0  |  32.49632  |
|  HeartGO:ARIC:131037726  |  1.0  |  56.0  |  24.67549  |
|  HeartGO:ARIC:131040818  |  1.0  |  48.0  |  27.40127  |
|  HeartGO:ARIC:131048473  |  1.0  |  48.0  |  28.13609  |
|  ...  |  ...  |  ...  |  ...  |
</WRAP>

 Properties of cleaned dataset

<code bash>
phenoman show summary < gout_EA_cleaned.txt
</code>\\
<hidden -noprint>
     esp_gout    esp_age_baseline esp_bmi_baseline
   Min.   :0.00   Min.   :22.00    Min.   :17.36
   1st Qu.:0.00   1st Qu.:46.00    1st Qu.:24.60
   Median :0.00   Median :52.00    Median :26.93
   Mean   :0.25   Mean   :53.44    Mean   :27.43
   3rd Qu.:0.25   3rd Qu.:61.00    3rd Qu.:29.14
   Max.   :1.00   Max.   :83.00    Max.   :49.50
</hidden>\\
====Use PhenoMan on an Extreme Quantitative Trait====
<box 80% round red|**__Warning__**>
 This example is provided for a quick demonstration purpose only without much detailed explanations. Please walk through the other two examples above first if you are new to **PhenoMan**.
</box>
===  Getting started ===
 We will select AA (African American) individuals that have their BMI on two extreme ends and perform several quality control steps based on hypothetical restrictions to create a 'cleaned' case-control phenotype dataset.

 check if phenotype **BMI** is contained in the input data

<code bash>
phenoman show fields --samples AA.txt | grep bmi
</code>\\
<hidden -noprint>
  esp_bmi_baseline ...
</hidden>\\
===  Remove missingness and duplicates ===
<code bash>
phenoman cook esp_bmi_baseline --samples AA.txt --duplicates AAdups.txt --output AA_bmi.txt\

</code>\\
<hidden -noprint>
  There are 31 individuals that are missing values on phenotype esp_bmi_baseline
  
  There are 117 individuals that are duplicates and have been removed
</hidden>\\
===  Detect outliers ===
 Draw histogram of ''esp_bmi_baseline''

<code bash>
phenoman view esp_bmi_baseline --samples AA_bmi.txt
eog esp_bmi_baseline_histogram_AA_bmi.png
</code>\\
{{:esp_bmi_baseline_histogram_AA_bmi_tmp.png?0.9}}
 Remove those that have BMI > 50

<code bash>
phenoman view esp_bmi_baseline -s AA_bmi.txt --critical_values 0 55 --savedata AA_rmo_bmi.t\
xt > outliers_AA_bmi.txt
head -10 outliers_AA_bmi.txt
</code>\\
<hidden -noprint>
  There are 0 individuals that are missing values on phenotype esp_bmi_baseline
  
  Generating histogram ...
  Done!
  OUTLIERS detected!
  HeartGO:JHS:PT-3HG7 	59.57042838
  HeartGO:JHS:PT-79S1 	55.84041019
  WHISP:D21144-66     	55.29934
  WHISP:D344531-82    	57.20953
  LungGO:3245         	55.68
  ...
</hidden>\\
<code bash>
eog esp_bmi_baseline_histogram_AA_bmi.png
</code>\\
{{:esp_bmi_baseline_histogram_AA_bmi.png?0.9}}
 Perform Guassian quantile normalization and view histogram of the tranformed data

<box 80% round orange|**__Important__**>
 All missing values must be removed (by running //phenoman cook ...// shown above) before normalization.
</box>
<code bash>
phenoman view esp_bmi_baseline -s AA_rmo_bmi.txt --qnormalize 0.01 0.99 --savedata AA_qnorm\
_bmi.txt
</code>\\
<hidden -noprint>
  Add a new column esp_bmi_baseline_qnormalized to the dataset
  ...
</hidden>\\
<code bash>
eog esp_bmi_baseline_qnormalized_histogram_AA_rmo_bmi.png
</code>\\
{{:esp_bmi_baseline_qnormalized_histogram_AA_rmo_bmi.png?0.9}}
===  Select case-control samples ===
 mean = 0; stdev = 0.936; range = [-2.326, 2.326]

 Set (mean - 0.75*stdev) and (mean + 0.75*stdev) as thresholds for sampling cases and controls.

<code bash>
phenoman select --samples AA_qnorm_bmi.txt --traits esp_bmi_baseline_qnormalized --criteria\
 "-2.5, -0.7" --tobecases --savedata AA_cases_bmi.txt
</code>\\
<hidden -noprint>
  The following individuals (N = 1609) have been removed:
  Broad:EOMI:01-0505
  Broad:EOMI:02-0039
  Broad:EOMI:08-0083
  Broad:EOMI:08-0247
  Broad:EOMI:08-0328
  ...
  (1604 sample names omitted)
  
  Number of individuals removed: 1609
  Number of individuals remained/selected: 501
  
  Write intermediate dataset to AA_cases_bmi.txt
</hidden>\\
<code bash>
phenoman select --samples AA_qnorm_bmi.txt --traits esp_bmi_baseline_qnormalized --criteria\
 "0.7, 2.5" --tobecontrols --savedata AA_controls_bmi.txt
</code>\\
<hidden -noprint>
  The following individuals (N = 1610) have been removed:
  Broad:EOMI:01-0505
  Broad:EOMI:08-0083
  Broad:EOMI:08-0247
  Broad:EOMI:08-0328
  Broad:EOMI:08-0655
  ...
  (1605 sample names omitted)
  
  Number of individuals removed: 1610
  Number of individuals remained/selected: 500
  
  Write intermediate dataset to AA_controls_bmi.txt
</hidden>\\
 Make number of cases equal to number of controls (500)

<code bash>
phenoman select --samples AA_qnorm_bmi.txt --traits esp_bmi_baseline_qnormalized --criteria\
 "-2.5, -0.7" --tobecases --savedata AA_cases_bmi.txt --samplesize 500
</code>\\
<hidden -noprint>
  WARNING: selected/remained number of indivduals (501) is greater than the required sample size (500), some individuals are randomly chosen from remained ones to be further removed to meet the sample size requirement. If you need to keep all remained individuals please rerun the last command WITHOUT specifying --samplesize argument
  
  WARNING: these individuals (N = 1) are randomly chosen to add in the removal list:
  WHISP:D266902-56
  ...
</hidden>\\
 Merge selected cases and controls

<code bash>
phenoman merge --byrows AA_cases_bmi.txt AA_controls_bmi.txt --output AA_casectrl_bmi.txt
phenoman view esp_bmi_baseline_qnormalized -s AA_casectrl_bmi.txt
eog esp_bmi_baseline_qnormalized_histogram_AA_casectrl_bmi.png
</code>\\
{{:esp_bmi_baseline_qnormalized_histogram_AA_casectrl_bmi.png?0.9}}
===  Select covariates ===
 For BMI extreme quantitative trait, we choose the following covariates to check if any of them has significant correlation with the primary trait.

	*	 age (''esp_age_baseline'')
	*	 sex (''GONCALO_SEX'')
	*	 smoking (''esp_current_smoker_baseline'')
 Check significance of covariates individually

<code bash>
phenoman show model --y esp_bmi_baseline_qnormalized --covariates esp_age_baseline < AA_cas\
ectrl_bmi.txt
phenoman show model --y esp_bmi_baseline_qnormalized --covariates GONCALO_SEX < AA_casectrl\
_bmi.txt
phenoman show model --y esp_bmi_baseline_qnormalized --covariates esp_current_smoker_baseli\
ne < AA_casectrl_bmi.txt
</code>\\
	*	 age (p-value: 1.52E-04)
	*	 sex (p-value: 0)
	*	 smoking (p-value: 0)
 Check significance of covariates by regressing them together

<code bash>
phenoman show model --y esp_bmi_baseline_qnormalized --covariates esp_age_baseline GONCALO_\
SEX esp_current_smoker_baseline < AA_casectrl_bmi.txt
</code>\\
<hidden -noprint>
  INPUT MODEL:
  
  Predictor                                         	Estimate  	z value   	Pr(>|z|)
  (Intercept)                                       	3.60      	5.32      	1.02E-07
  GONCALO_SEX                                       	-2.59     	-7.94     	1.95E-15
  esp_age_baseline                                  	1.68E-02  	2.47      	1.36E-02
  esp_current_smoker_baseline                       	1.44      	7.10      	1.27E-12
  p-value:                                          	0
  
  OPTIMIZED MODEL:
  
  Predictor                                         	Estimate  	z value   	Pr(>|z|)
  (Intercept)                                       	3.60      	5.32      	1.02E-07
  GONCALO_SEX                                       	-2.59     	-7.94     	1.95E-15
  esp_age_baseline                                  	1.68E-02  	2.47      	1.36E-02
  esp_current_smoker_baseline                       	1.44      	7.10      	1.27E-12
  
  MODEL SELECTION:
  
  AIC=1076.01	GONCALO_SEX+esp_age_baseline+esp_current_smoker_baseline
</hidden>\\
 For BMI extreme quantitative trait (''esp_bmi_baseline_qnormalized''), select age, sex and smoking as covariates.

===  Perform final cleaning ===
 We use //phenoman cook// to fill in missing values in covariates and to finalize the phenotype data quality control for this example.

<code bash>
phenoman cook esp_bmi_baseline_qnormalized --samples AA_casectrl_bmi.txt --include esp_age_\
baseline GONCALO_SEX esp_current_smoker_baseline --filter_missing 0.8 --output bmi_AA_casec\
trl_cleaned.txt > bmi_AA_casectrl_summary.txt
cat bmi_AA_casectrl_summary.txt
</code>\\
<hidden -noprint>
  FIELD	MISSING_RATE	#BELOW_AVG	#ABOVE_AVG
  GONCALO_SEX	0.0000	171	829
  esp_current_smoker_baseline	0.0890	800	200
  esp_bmi_baseline_qnormalized	0.0000	500	500
  esp_age_baseline	0.0000	390	610
</hidden>\\
<code bash>
head -10 bmi_AA_casectrl_cleaned.txt
</code>\\
<WRAP center 80%>
^  sample_name  ^  esp_bmi_baseline_qnormalized  ^  GONCALO_SEX  ^  esp_age_baseline  ^  esp_current_smoker_baseline  ^
|  Broad:EOMI:08-0682  |  1  |  2  |  43.0  |  1.0  |
|  Broad:EOMI:27-0011  |  1  |  1  |  35.0  |  1.0  |
|  Broad:EOMI:30-0055  |  1  |  2  |  55.0  |  0.0  |
|  Broad:EOMI:35-0108  |  1  |  2  |  57.0  |  1.0  |
|  Broad:EOMI:HAR000659RD1a_A  |  1  |  1  |  48.0  |  1.0  |
|  Broad:EOMI:HAR000904RD3_A  |  1  |  2  |  57.0  |  1.0  |
|  Broad:EOMI:SM-14FDL  |  1  |  2  |  47.0  |  1.0  |
|  Broad:EOMI:SM-14FDS  |  1  |  1  |  27.0  |  1.0  |
|  Broad:EOMI:SM-14FDW  |  1  |  1  |  47.0  |  1.0  |
|  ...  |  ...  |  ...  |  ...  |  ...  |
</WRAP>

 Properties of cleaned dataset

<code bash>
phenoman show summary < bmi_AA_casectrl_cleaned.txt
</code>\\
<hidden -noprint>
  esp_bmi_baseline_qnormalized  GONCALO_SEX    esp_age_baseline  esp_current_smoker_baseline
   Min.   :0.0                  Min.   :1.000   Min.   : 7.00    Min.   :0.000
   1st Qu.:0.0                  1st Qu.:2.000   1st Qu.:49.00    1st Qu.:0.000
   Median :0.5                  Median :2.000   Median :56.00    Median :0.000
   Mean   :0.5                  Mean   :1.829   Mean   :53.79    Mean   :0.199
   3rd Qu.:1.0                  3rd Qu.:2.000   3rd Qu.:63.00    3rd Qu.:0.000
   Max.   :1.0                  Max.   :2.000   Max.   :88.00    Max.   :1.000
</hidden>\\
===== References =====
 **PhenoMan** is a command line program written in Python. All commands involve typing ''phenoman'' at the command prompt (e.g. Linux/Mac terminal or DOS window) followed by a number of options (all starting with //--option//) to specify the data files / methods to be used. All results can be written to files with various extensions. The input phenotype data file is by default of following the **dbGaP** format with one header row and a fixed number of columns per line. A complete list of all options is given in the reference section.

<box 80% round orange|**__Important__**>
 Before moving along, please make sure that all prerequisites of using **PhenoMan** have been met (including proper installation of **PhenoMan** and its dependency programs, and correct format and codings of the input data)
</box>
====Running PhenoMan====
 Open up a command prompt or terminal window and perform all analyses by typing commands as:

<code bash>
phenoman module (phenotype) --option1 (argument1) --option2 (argument2) ...
</code>\\
 Terms in '()' are optional or not required depending on which module and what options are called.

<box 80% round blue|**__Note__**>
 By default, running //phenoman// commands will print error and warning messages to the standard output, which is the screen most of the time. To redirect those messages and save them into a text file, add //> FILENAME.txt// to the end of any //phenoman// command.
</box>
====Modules====
 **PhenoMan** consists of the following modules:

	*	 Help - show detailed information of each module and its options
	*	 Show - show raw data, basic statistical summary, check data fields (column names), perform model selection (regression framework), control for covariates, add residuals
	*	 View - view trait distribution, data transformation (log, scaling, standardization, normalization, Gaussian quantile normalization), detect and determine outliers based on both primary trait and secondary traits
	*	 Cook - remove missingness on primary trait, remove duplicates, fill missingness in covariates, include/exclude selected/removed covariates, finalize phenotype data cleaning
	*	 Select - sample individuals randomly or based on given criteria of specified phenotypes, select/remove individuals by required sample size
	*	 Massage - winsorize outliers
	*	 Comdummy - combine and/or dummy code covariates
	*	 Merge - merge separated datasets into single one (either by row or by column)
===  //phenoman show// ===
 Show raw data, show data summary for data from standard input, show model selection result.

 Usage:

<code bash>
phenoman show object(data/fields) --samples dataset.txt --other_options args
</code>\\
 or

<code bash>
phenoman show object(summary/model) --options args < dataset.txt
</code>\\
 Choose an object first to decide what to show then select to use options.

 List of options:

	*	 //--y// - name of the primary phenotype (usable for //show summary// and //show model//)
	*	 //--samples// - takes an input data file (/path/to/dataset.txt)
	*	 //--covariates// - takes a list of covariates names (usable for //show summary// and //show model//)
	*	 //--add_residuals// - takes no value, if specified it will calculate residuals between model prediction and data, and add a column ''phenotype_residuals'' to the dataset
	*	 //--savedata// - takes a file name (/path/to/datafilename.txt) to which the intermediate dataset with remained individuals will be saved
	*	 //--reference_group// - takes a string to set reference group for dummy coded covariates (usable for //show model//)
===  //phenoman view// ===
 For specified phenotype/trait in specified population, generate histogram to help determine transformation of trait and outliers (duplicates implicitly excluded).

 Usage:

<code bash>
phenoman view phenotype --samples dataset.txt --other_options args
</code>\\
 Choose a 'phenotype' to be processed first then select to use options. Use //phenoman show fields// to view all available phenotypes

 List of options:

	*	 //--samples// - takes an input data file (/path/to/dataset.txt)
	*	 //--output// - takes an output graph(histogram) filename (default: 'phenotype_histogram_dataset.png' where 'phenotype' and 'dataset' are replaced with name of the trait and prefix of the input data file). Output is in png format.
	*	 //--pdf// - if specified generate pdf instead of png graph
	*	 //--savedata// - takes a file name (/path/to/datafilename.txt) to which the intermediate dataset with remained individuals will be saved
	*	 //--keepmissing// - keep instead of removing individuals that have missing values on the 'phenotype' (use with //--savedata// option)
	*	 //--transform// - takes 'log' or 'log10', log normal or log 10 transformation of 'phenotype'
	*	 //--critical_values// - specify the lower (the first input value) and upper (the second input value) bounds that define extreme phenotypes. If '--percentile' option is specified then the input upper and lower bound values are taken as percentiles (e.g., '0.01 0.99' means to include phenotypes having values within 1st and 99th percentiles)
	*	 //--percentile// - treat input lower and upper bounds from //--critical_values// as percentiles (only usable with //--critical_values//)
	*	 //--scale// - shift 'phenotype' by mean (x-mean)
	*	 //--standardize// - standardize 'phenotype' by (x-mean)/variance
	*	 //--normalize// - apply normalization on 'phenotype', which scales all numeric values in the range [0,1] by (x-min)/(max-min)
	*	 //--qnormalize// - apply Gaussian Quantile normalization on 'phenotype' between the specified lower and upper bounds that define the range of probabilities, e.g. 0.025 0.975
===  //phenoman cook// ===
 For specified phenotype/trait in specified population, remove missing values, remove duplicates, remove outliers, transform trait if necessary, fill-up missing covariates and output cleaned phenotypes and selected covariates.

 Usage:

<code bash>
phenoman cook phenotype --samples dataset.txt --other_options args
</code>\\
 Choose a 'phenotype' to be processed first then select other options.

 Option list:

	*	 //--samples// - takes an input data file (/path/to/dataset.txt)
	*	 //--duplicates// - takes a number of files that contains names of lists of duplicates and/or related individuals
	*	 //--output// - takes an output data file name (/path/to/cleaned_dataset.txt)
	*	 //--include// - specify particular covariates to output (default set to output all covariates).
	*	 //--exclude// - specify particular covariates NOT to output (default set to exclude no covariate)
	*	 //--filter_missing// - specify threshold of maximum allowed proportion of missingness for selected covariates, e.g. //--filter_missing 0.8// fill-in missing values in covariates that have percentage of missingness less than 80%, discard covariates that do otherwise.
	*	 The following options are inherited from //phenoman view// and work exactly the same here in //phenoman cook//.
	*	 //--transform//, //--critical_values//, //--percentile//, //--scale//, //--standardize//, //--normalize//, //--qnormalize//
===  //phenoman select// ===
 Select individuals according to specified traits with given criteria, add individuals to or remove individuals from the dataset.

 Usage:

<code bash>
phenoman select --samples dataset.txt --other_options args
</code>\\
 Option list:

	*	 //--samples// - takes an input data file (/path/to/dataset.txt)
	*	 //--traits// - specify a lists of traits/phenotypes (usable only with //--criteria//)
	*	 //--criteria// - specify selection criteria for 'traits' (usable with //--traits//. Only individuals that have specified 'traits' following given 'criteria' will be selected. Each criterion for each trait can be a single value/string(0 or NA), a range of numerical values (e.g. //20, 80// or //-2, -1// including boundary values) or a list of strings (separated by '|') to choose from (e.g. A|B|C)''')
	*	 //--savedata// - takes a file name (/path/to/datafilename.txt) to which the intermediate dataset with remained individuals will be saved
	*	 //--removedselected// - Remove selected individuals from the dataset instead of keeping them (otherwise if the option is not used)
	*	 //--samplesize// - Desired number of individuals remained in the dataset after selection 'criteria' have been applied (restore or remove some individuals to meet the sample size requirement)
	*	 //--removethese// - file names that contain lists of sample names to be removed from the dataset under any circumstance
	*	 //--keepthese// - file names that contain lists of sample names to be kept in the dataset regardless of //--criteria//
	*	 //--tobecases// - recode trait #1 (//--traits 1 2 ..//) in all remained individuals to 1 (1 for case, only usable with //--traits//)
	*	 //--tobecontrols// - recode trait #1 (//--traits 1 2..//) in all remained individuals to 0 (0 for control, only usable with //--traits//)
	*	 //--keeporiginal// - keep original values of trait #1 by adding a new column named by 'trait1_original' to the dataset (only usable with //--tobecases// or //--tobecontrols//)
===  //phenoman massage// ===
 Reset trait values that are out of specified bounds with boundary values (winsorization).

 Usage:

<code bash>
phenoman massage phenotype --samples dataset.txt --other_options args
</code>\\
 List of options:

	*	 //--samples// - takes an input data file (/path/to/dataset.txt)
	*	 //--lower// - specify lower bound (e.g. 0 or 0.001 if //--percentile// is used)
	*	 //--upper// - specify upper bound (e.g. 400 or 0.999 if //--percentile// is used)
	*	 //--savedata// - specify the output data file name
	*	 //--percentile// - treat input lower and upper bounds as percentile (only usable with //--lower// and/or //--upper//)
===  //phenoman comdummy// ===
 Combine and/or dummy code phentoypes/covariates

 Usage:

<code bash>
phenoman comdummy --samples dataset.txt --other_options args
</code>\\
 Option List:

	*	 //--samples// - takes an input data file (/path/to/dataset.txt)
	*	 //--sample_col// - specify column index for sample names (default set to 1)
	*	 //--style// - takes ''diagnal' or 'triangle'
	*	 ...
===  "phenoman merge: ===
 Merge separated datasets into single dataset (either by row or by column)

 Usage:

<code bash>
phenoman merge --byrows data1.txt data2.txt ... --output data.txt
</code>\\
 or

<code bash>
phenoman merge --bycolumns data1.txt data2.txt ... --output data.txt
</code>\\
 List of options:

	*	 //--byrows// - data files to be merged by rows (need to make sure that all files contain equivalent number of columns and column names in these files are arranged in the same order)
	*	 //--bycolumns// - data files to be merged by columns, where file #1 is the primary file into which other files will be merged (add columns that are contained in files #2, #3, ..., but not in file #1 to file #1; missing values in newly added columns will be marked by 'nan')
	*	 //--output// - specify the merged data file name
===== Command Examples =====
 This section contains a rough overview of main operations in **PhenoMan**. In particular, it is written to indicate which certain operations are performed to clean raw phenotype datasets. Typically, we undergo data exploration, management and quality control steps to determine phenotype data cleaning rules, order/re-order datasets and create the 'cleaned' data that can be directly used in association studies of quantitative and qualitative traits.

<box 80% round blue|**__Note__**>
 By providing command examples listed in the following several subsections we do NOT suggest any particular order of performing **PhenoMan** operations. The combination of opertions should be appropriately designed to be data-centric and user-specific while **PhenoMan** is applied on real data. See the 'Tutorial' chapter for examples of applying **PhenoMan** on a quantitative, a case-control and an extreme quantitative traits.
</box>
====Phenotype Data Exploration====
===  header information ===
<code bash>
phenoman show fields --samples xxx
</code>\\
===  basic statistical summary ===
 show selected phenotype and covariates only

<code bash>
phenoman show summary --y phenotype --covariates phenotypes < data.txt
</code>\\
 show all phenotypes

<code bash>
phenoman show summary < data.txt
</code>\\
 data.txt can be either raw data or cleaned data

===  view distribution ===
<code bash>
phenoman view phenotype --samples data.txt
phenoman view phenotype --samples data.txt --output phenotype_hist.png
phenoman view phenotype --samples data.txt --pdf --output phenotype_hist.pdf
</code>\\
===  determine outliers ===
 primary trait (remove individuals with missing values)

<code bash>
phenoman view phenotype --samples data.txt --critical_values lower_bound upper_bound
</code>\\
 secondary traits (keep individuals with missingness)

<code bash>
phenoman view phenotype_non_primary --samples data.txt --critical_values ower_bound upper_b\
ound --keepmissing --savedata data_tmp.txt > outliers.txt
phenoman view phenotype --samples data.txt --critical_values lower_bound_in% upper_bound_in\
% --percentile
</code>\\
====Phenotype Data Management====
===  log transformation ===
<code bash>
phenoman view phenotype --samples data.txt --transform log
phenoman view phenotype --samples data.txt --transform log10
</code>\\
===  scaling ===
<code bash>
phenoman view phenotype --samples data.txt --scale --savedata data_scaled.txt
</code>\\
===  standardization ===
<code bash>
phenoman view phenotype --samples data.txt --standardize --savedata data_standardized.txt
</code>\\
===  normalization ===
<code bash>
phenoman view phenotype --samples data.txt --normalize --savedata data_normalized.txt
</code>\\
===  Guassian Quantile normalization ===
<code bash>
phenoman view phenotype --samples data.txt --qnormalize lowest_probability highest_probabil\
ity --savedata data_qnormalized.txt
</code>\\
===  winsorising ===
<code bash>
phenoman massage phenotype --samples data.txt --lower lower_bound --upper upper_bound --sav\
edata data_win.txt
phenoman massage phenotype --samples data.txt --lower lower_bound_in% --upper upper_bound_i\
n% --percentile --savedata data_win.txt > summary_winsorising.txt
</code>\\
===  dummy coding ===
 combined dummy coding

<code bash>
phenoman comdummy --samples data.txt --sample_col 1 --cols 2 3 --header TACO > cdummy_pheno\
.txt
</code>\\
===  merging datasets ===
<code bash>
phenoman merge --byrows data1.txt data2.txt ... --output data_merged.txt
phenoman merge --bycolumns data1.txt data2.txt ... --output data_merged.txt
</code>\\
====Phenotype Data Quality Control====
===  remove missingness on primary phenotype ===
<code bash>
phenoman cook phenotype --samples data.txt --output data_no_missing.txt
</code>\\
===  remove duplicates ===
<code bash>
phenoman cook phenotype --samples data.txt --duplicates dups.txt --output data_no_dups.txt
</code>\\
===  fill missingness in covariates ===
<code bash>
phenoman cook phenotype --samples data.txt --filter_missing missing_ratio --output data_cle\
aned.txt > summary.txt
</code>\\
===  model selection (control for covariates) ===
<code bash>
phenoman show model --y phenotype --covariates phenotypes < data.txt
</code>\\
===  add residuals ===
<code bash>
phenoman show model --y phenotype --covariates phenotypes --add_residuals --savedata data_w\
ith_residuals.txt < data.txt
</code>\\
===  select individuals ===
 unbiased

<code bash>
phenoman select --samples data.txt --traits phenotype1 phenotype2 phenotype3 --criteria 1 "\
0.1, 0.9" 'A|B|C' --savedata data_selected_individuals.txt
</code>\\
 biased (with //--keepthese// and/or //--removethese//)

<code bash>
phenoman select --samples data.txt --traits phenotypes --criteria criteria --keepthese samp\
le_names_to_keep.txt --removethese sample_names_to_remove.txt
</code>\\
===  remove individuals ===
 unbiased

<code bash>
phenoman select --samples data.txt --traits phenotypes --criteria criteria --removeselected\
 --savedata data_remained_individuals.txt
</code>\\
 biased (with //--keepthese// and/or "--removethese)

<code bash>
phenoman select --samples data.txt --traits phenotypes --criteria criteria
--removeselected --keepthese sample_names_to_keep.txt --removethese sample_names_to_remove.\
txt
</code>\\
===  select extreme quantitative trait ===
 cases (recode 'phenotype')

<code bash>
phenoman select --samples data.txt --traits phenotype --criteria "lower_bound, upper_bound"\
 --tobecases --savedata data_cases.txt
</code>\\
 controls (recode 'phenotype')

<code bash>
phenoman select --samples data.txt --traits phenotype --criteria "lower_bound, upper_bound"\
 --tobecontrols --savedata data_controls.txt
</code>\\
 keep original 'phenotype'

<code bash>
phenoman select --samples data.txt --traits phenotype --criteria "lower_bound, upper_bound"\
 --tobecases --savedata data_cases_ori.txt --keeporiginal
</code>\\
===  draw sample ===
<code bash>
phenoman select --samples data.txt --traits phenotypes --criteria criteria --samplesize N -\
-savedata data_sample.txt
</code>\\